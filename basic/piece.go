package basic

// generated by gen.js, don't edit

type Figure int

const (
   NoFigure         = Figure(0)
   Pawn             = Figure(1)
   Knight           = Figure(2)
   Bishop           = Figure(3)
   Rook             = Figure(4)
   Queen            = Figure(5)
   King             = Figure(6)
   Lancer           = Figure(7)
   LancerN          = Figure(8)
   LancerNE         = Figure(9)
   LancerE          = Figure(10)
   LancerSE         = Figure(11)
   LancerS          = Figure(12)
   LancerSW         = Figure(13)
   LancerW          = Figure(14)
   LancerNW         = Figure(15)
   Sentry           = Figure(16)
   Jailer           = Figure(17)
   FigureArraySize  = int(iota)
)

const FigureMinValue = Pawn
const FigureMaxValue = Jailer

const LancerMinValue = LancerN
const LancerMaxValue = LancerNW

const LANCER_DIRECTION_MASK = 0b111

// SymbolOf tells the symbol of a Figure
var SymbolOf = [18]string{
   "."    , // 0   NoFigure
   "p"    , // 1   Pawn
   "n"    , // 2   Knight
   "b"    , // 3   Bishop
   "r"    , // 4   Rook
   "q"    , // 5   Queen
   "k"    , // 6   King
   "l"    , // 7   Lancer
   "ln"   , // 8   LancerN
   "lne"  , // 9   LancerNE
   "le"   , // 10  LancerE
   "lse"  , // 11  LancerSE
   "ls"   , // 12  LancerS
   "lsw"  , // 13  LancerSW
   "lw"   , // 14  LancerW
   "lnw"  , // 15  LancerNW
   "s"    , // 16  Sentry
   "j"    , // 17  Jailer
}

type Piece int

const (
   NoPiece               = Piece(0)
   DummyPiece            = Piece(1)
   BlackPawn             = Piece(2)
   WhitePawn             = Piece(3)
   BlackKnight           = Piece(4)
   WhiteKnight           = Piece(5)
   BlackBishop           = Piece(6)
   WhiteBishop           = Piece(7)
   BlackRook             = Piece(8)
   WhiteRook             = Piece(9)
   BlackQueen            = Piece(10)
   WhiteQueen            = Piece(11)
   BlackKing             = Piece(12)
   WhiteKing             = Piece(13)
   BlackLancer           = Piece(14)
   WhiteLancer           = Piece(15)
   BlackLancerN          = Piece(16)
   WhiteLancerN          = Piece(17)
   BlackLancerNE         = Piece(18)
   WhiteLancerNE         = Piece(19)
   BlackLancerE          = Piece(20)
   WhiteLancerE          = Piece(21)
   BlackLancerSE         = Piece(22)
   WhiteLancerSE         = Piece(23)
   BlackLancerS          = Piece(24)
   WhiteLancerS          = Piece(25)
   BlackLancerSW         = Piece(26)
   WhiteLancerSW         = Piece(27)
   BlackLancerW          = Piece(28)
   WhiteLancerW          = Piece(29)
   BlackLancerNW         = Piece(30)
   WhiteLancerNW         = Piece(31)
   BlackSentry           = Piece(32)
   WhiteSentry           = Piece(33)
   BlackJailer           = Piece(34)
   WhiteJailer           = Piece(35)
)

const PieceMinValue = BlackPawn
const PieceMaxValue = WhiteJailer
const PieceArraySize = PieceMaxValue - PieceMinValue + 1

var FigureOf [36]Figure

type Color int

const (
	Black = Color(iota)
	White
	NoColor
	ColorArraySize = int(iota)
)

const COLOR_MASK = White

const ColorMinValue = 0
const ColorMaxValue = NoColor

func (color Color) Inverse() Color{
    if color == White{
        return Black
    }

    if color == Black{
        return White
    }

    return NoColor
}

// ColorOf tells the color of a Piece
var ColorOf [36]Color

// ColorFigure constructs a Piece from Color and Figure
var ColorFigure[2][18]Piece

// SymbolToPiece tells Piece for a FEN symbol
var SymbolToPiece = map[string]Piece{
   "p"    : BlackPawn,        // 2
   "P"    : WhitePawn,        // 3
   "n"    : BlackKnight,      // 4
   "N"    : WhiteKnight,      // 5
   "b"    : BlackBishop,      // 6
   "B"    : WhiteBishop,      // 7
   "r"    : BlackRook,        // 8
   "R"    : WhiteRook,        // 9
   "q"    : BlackQueen,       // 10
   "Q"    : WhiteQueen,       // 11
   "k"    : BlackKing,        // 12
   "K"    : WhiteKing,        // 13
   "l"    : BlackLancer,      // 14
   "L"    : WhiteLancer,      // 15
   "ln"   : BlackLancerN,     // 16
   "Ln"   : WhiteLancerN,     // 17
   "lne"  : BlackLancerNE,    // 18
   "Lne"  : WhiteLancerNE,    // 19
   "le"   : BlackLancerE,     // 20
   "Le"   : WhiteLancerE,     // 21
   "lse"  : BlackLancerSE,    // 22
   "Lse"  : WhiteLancerSE,    // 23
   "ls"   : BlackLancerS,     // 24
   "Ls"   : WhiteLancerS,     // 25
   "lsw"  : BlackLancerSW,    // 26
   "Lsw"  : WhiteLancerSW,    // 27
   "lw"   : BlackLancerW,     // 28
   "Lw"   : WhiteLancerW,     // 29
   "lnw"  : BlackLancerNW,    // 30
   "Lnw"  : WhiteLancerNW,    // 31
   "s"    : BlackSentry,      // 32
   "S"    : WhiteSentry,      // 33
   "j"    : BlackJailer,      // 34
   "J"    : WhiteJailer,      // 35
}

